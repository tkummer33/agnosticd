---
- name: Step 001 software
  hosts: bastions
  gather_facts: false
  become: true
  tasks:
  - name: Debug
    debug:
      msg: "Software playbook"

- name: Step 004.1 - Host preparation for OpenShift 4 deployment
  hosts: bastions
  become: true
  gather_facts: False
  tags:
    - step004
    - step004.1
  tasks:
  - name: Call Role to provision OCP4 install host
    include_role:
      name: host-ocp4-provisioner

- name: Step 004.2 Prepare ignition files for Openshift installation
  hosts: bastions
  gather_facts: false
  become: false
  tags:
    - step004
    - step004.2
  tasks:
  - name: Call Role to install OpenShift
    when: install_ocp4 | d(True) | bool
    include_role:
      name: host-ocp4-installer

- name: Step 004.3 configure web_server Openshift installation
  hosts: host_www
  become: true
  tags:
    - step004
    - step004.3
  tasks:
  - name: Call Role to install the web_server
    when: install_ocp4 | d(True) | bool
    include_role:
      name: config-httpd

- name: step 004.4 create the user-data
  hosts: localhost
  become: false
  tasks:
  - name: create user-data
    template:
      src: files/user-data.j2
      dest: "{{ output_dir }}/{{ item }}"
    loop:
    - worker
    - master
    - bootstrap


- name: step 004.5 deploy the infrastructure (stacks_install)
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  environment:
    OS_AUTH_URL: "{{ osp_auth_url }}"
    OS_USERNAME: "{{ osp_auth_username }}"
    OS_PASSWORD: "{{ osp_auth_password }}"
    OS_PROJECT_NAME: "admin"
    OS_PROJECT_DOMAIN_ID: "{{ osp_auth_project_domain }}"
    OS_USER_DOMAIN_NAME: "{{ osp_auth_user_domain }}"
  tasks:
    - name: set stacks
      set_fact:
        stacks: "{{ stacks_install }}"
    - name: Run infra-osp-template-generate Role
      import_role:
        name: infra-osp-template-generate

    - name: Run infra-osp-template-create Role
      import_role:
        name: infra-osp-template-create

- name: Step 004.6 Create Inventory and SSH config setup
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - step001
    - step001.2
    - create_inventory
    - create_ssh_config
  environment:
    OS_AUTH_URL: "{{ osp_auth_url }}"
    OS_USERNAME: "{{ osp_auth_username }}"
    OS_PASSWORD: "{{ osp_auth_password }}"
    OS_PROJECT_NAME: "{{ osp_project_name }}"
    OS_PROJECT_DOMAIN_ID: "{{ osp_auth_project_domain }}"
    OS_USER_DOMAIN_NAME: "{{ osp_auth_user_domain }}"
  tasks:
    - name: Gather instance facts
      os_server_facts:
        server: "*"
        filters:
          metadata:
            guid: "{{ guid }}"
            env_type: "{{ env_type }}"
      register: r_osp_facts

    - name: debug osp_facts
      debug:
        var: r_osp_facts
        verbosity: 2
    - name: set_internal_entries
      set_fact:
         internal_dns_entries: "{{ final_internal_entries }}"

    - name: Run manage-dns-records role
      import_role:
        name: manage-dns-records

    - name: Run infra-osp-create-inventory Role
      import_role:
        name: infra-osp-create-inventory

    - name: Run Common SSH Config Generator Role
      import_role:
        name: infra-common-ssh-config-generate

# include global vars again, this time for all hosts now that the inventory is built
- import_playbook: ../../include_vars.yml
  tags:
    - create_inventory
    - must

- name: Step 004.7 install and configure loadbalancer
  hosts: lb_vms
  gather_facts: false
  become: true
  tasks:
  - set_fact:
      lb_config: "{{ install_lb_config }}"


  - import_role:
      name: manage-haproxy
      tasks_from: install
    tags:
    - 'always'
  - import_role:
      name: manage-haproxy
      tasks_from: generate-config
    tags:
    - 'always'
  - import_role:
      name: manage-haproxy
      tasks_from: activate-config
    tags:
    - 'always'
